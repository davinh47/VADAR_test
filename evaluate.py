import argparse
import os
import sys
import random
import torch
import numpy as np
from datetime import datetime

module_path = os.path.abspath(os.path.join(".."))
if module_path not in sys.path:
    sys.path.append(module_path)
import json
from agents.agents import SignatureAgent, APIAgent, ProgramAgent, AuditAgent
from engine.engine import Engine
from prompts.modules import MODULES_SIGNATURES, MODULES_SIGNATURES_CLEVR
import random


def set_seeds(seed):
    random.seed(seed)
    torch.manual_seed(seed)
    np.random.seed(seed)


def run_agents(args):
    # Load Questions
    with open(args.annotations_json, "r") as file:
        questions_data = json.load(file)
    questions = list(questions_data["questions"])[: args.num_questions]

    if args.dataset == "clevr":
        signature_agent = SignatureAgent(MODULES_SIGNATURES_CLEVR)
    else:
        signature_agent = SignatureAgent(MODULES_SIGNATURES)

    results_folder_path = os.path.join(
        args.results_pth, datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    )
    os.makedirs(results_folder_path)

    # Generate signatures of API methods.
    api_questions = random.sample(questions, args.num_api_questions)
    print("Generating Signatures...")
    signature_agent.get_signatures(
        api_questions,
        args.image_pth,
        results_folder_path,
    )

    # Implement methods generated by Signature Agent.
    print("Generating API Implementation...")
    api_agent = APIAgent(signature_agent, args.dataset)
    api_agent.get_api_implementations(results_folder_path)

    # Generate a solution program for each question using the generated API.
    program_agent = ProgramAgent(api_agent, dataset=args.dataset)
    print("Generating Programs...")
    program_agent.get_programs(
        questions,
        args.image_pth,
        results_folder_path,
    )

    # Execute solution programs.
    print("Executing programs...")
    engine = Engine(
        api_agent.api,
        results_folder_path=results_folder_path,
        models_path=args.models_path,
        dataset=args.dataset,
    )
    engine.execute_programs(
        program_agent.programs,
        questions,
        args.image_pth,
        oracle=args.oracle,
        scenes_json_path=args.scenes_json,
    )

    # Audit execution
    print("Auditing...")
    audit_agent = AuditAgent(engine, MODULES_SIGNATURES)
    audit_agent.start_audit(
        args.image_pth,
        results_folder_path=results_folder_path,
    )

if __name__ == "__main__":
    set_seeds(42)
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--dataset",
        default="omni3d",
        choices=["gqa", "clevr", "omni3d"],
        help="Name of dataset (default: %(default)s)",
    )
    parser.add_argument(
        "--annotations-json",
        default="data/omni3d-bench/annotations.json",
        help="Path to JSON file of questions (default: %(default)s)",
    )
    parser.add_argument(
        "--image-pth",
        default="data/omni3d-bench/images/",
        help="Path to directory containing images associated with questions (default: %(default)s)",
    )
    parser.add_argument(
        "--models-path",
        default="models/",
        help="Path to directory containing models (default: %(default)s)",
    )
    parser.add_argument(
        "--results-pth",
        default="results/",
        help="Path to directory to save html results in (default: %(default)s)",
    )
    parser.add_argument(
        "--scenes-json",
        default="",
        help="Path to json file with scene data per image (default: %(default)s)",
    )
    parser.add_argument(
        "--oracle",
        action="store_true",
        help="Use Oracle Agent for execution. Only supported for the CLEVR dataset.",
    )
    parser.add_argument(
        "--num-questions",
        default=-1,
        type=int,
        help="Number of questions to loop through. -1 for all. Must be at least num_api_questions (default: %(default)s)",
    )
    parser.add_argument(
        "--num-api-questions",
        default=10,
        type=int,
        help="Number of questions to loop through for api (default: %(default)s)",
    )
    args = parser.parse_args()

    run_agents(args)
